n <- x + k - 1
print(n)
k <- 7
f <- function (x) (dbinom(3,x,1/(4^k),log=FALSE)*(4^k))
range <- c(1:14)
plot(range,f(range),type="l")
x <- 440
f(x)
x <- 439
f(x)
x <- 438
f(x)
x <- 437
f(x)
x <- 436
f(x)
n <- x + k - 1
print(n)
k <- 8
f <- function (x) (dbinom(3,x,1/(4^k),log=FALSE)*(4^k))
range <- c(1:14)
plot(range,f(range),type="l")
x <- 899
f(x)
x <- 999
f(x)
x <- 1005
f(x)
x <- 1105
f(x)
x <- 1055
f(x)
x <- 1065
f(x)
x <- 1075
f(x)
x <- 1085
f(x)
x <- 1095
f(x)
x <- 1096
f(x)
x <- 1095
f(x)
n <- x + k - 1
print(n)
n.array <- array()
n.array[1:6] <- c(14,31,74,179,442,1102)
k.array <- array()
k.array [1:6] <- c(3,4,5,6,7,8)
plot(k.array,n.array,type="p",col="blue",xlab="k",ylab="maximum n")
phred.p <- function (x) 10^(-x/10)
phred.p(23)
type.I <- function (n) pbinom(n,n,phred.p(23),log=FALSE)
type.I(1)
type.I(2)
type.I(10)
type.I(30)
type.I <- function (n) dbinom(n,n,phred.p(23),log=FALSE)
type.I(30)
type.I <- function (n) dbinom(n,n,1-phred.p(23),log=FALSE)
type.I(30)
type.I(40)
type.I(50)
type.I <- function (n) pbinom(0,n,phred.p(23),log=FALSE)
type.I(1)
type.I(2)
type.I(3)
type.I(10)
type.I(12)
n <- 30
k <- c(0,1,2)
L1 <- function (k) (choose(n,k)*0.5^(n-k)*0.5^(k))
L2 <- function (k) (choose(n,k)*0.98^(n-k)*0.02^(k))
LR <- function (k) ((choose(n,k)*0.5^(n-k)*0.5^(k))/(choose(n,k)*0.98^(n-k)*0.02^(k)))
f(8)
plot(f(c(0:30)), log = "y")
plot(dbinom(c(0:30),30,0.5,log=FALSE),type="l",col="green")
lines(dbinom(c(0:30),30,0.02,log=FALSE),col="red")
dbinom(0,30,0.5,log=FALSE)
pbinom(29,30,0.98,log=FALSE)
n <- 30
k <- 2
type.I <- function (k) (((3*10^9)-2500000)/(3*10^9)) * pbinom(n-k,n,0.98,log=FALSE)
type.II <- function (k) (2500000/(3*10^9)) * pbinom(k-1,n,0.5,log=FALSE)
error.sum <- function (k) type.I(k) + type.II(k)
plot(type.I(0:30),type="l",col="green")
lines(type.II(0:30),col="red")
lines(error.sum(0:30),col="blue")
optimize(error.sum, c(0:30), maximum=FALSE)
error.sum(9)
plot(0:30,error.sum(0:30),log="y",type="l",ylab="Type I + Type II Error",xlab="Threshold K")
axis(side=1, at=seq(0,30,by=1))
type.I <- function (n) pbinom(0,n,phred.p(23),log=FALSE)
type.I <- function (n) pbinom(n-1,n,phred.p(23),log=FALSE)
type.I(10)
type.I(20)
type.I(50)
type.I <- function (n) dbinom(n,n,phred.p(23),log=FALSE)
type.I(50)
type.I(10)
type.I <- function (n) dbinom(n,n,1-phred.p(23),log=FALSE)
type.I(10)
type.I <- function (n) pbinom(n-1,n,1-phred.p(23),log=FALSE)
type.I(10)
type.I(30)
type.II <- function (n) pbinom(0,n,0.5,log=FALSE)
type.II(1)
type.II(5)
type.II(10)
error.sum <- function (n) type.I(n) + type.II(n)
type.I <- function (n) pbinom(n-1,n,1-phred.p(23),log=FALSE)
type.II <- function (n) pbinom(0,n,0.5,log=FALSE)
error.sum <- function (n) type.I(n) + type.II(n)
plot(c(1:40),error.sum(c(1:40)))
optimize(error.sum, c(1,30), maximum=FALSE)
optimize(error.sum, c(1:30), maximum=FALSE)
warnings()
error.sum(8)
error.sum(7)
error.sum(6)
type.I(6)
type.II(6)
type.I(20)
type.I(30)
plot(c(1:40),type.I(c(1:40)))
plot(c(1:40),type.II(c(1:40)))
type.II(30)
type.II(30)*3*10^9
type.II(31)*3*10^9
type.II(32)*3*10^9
type.I(32)
doubles.counts <- array()
triples.counts <- array()
for(z in 1:1000){
G <- sample(1:5,31,replace=TRUE)
db <- array()
for(i in 1:(length(G)-2)){
db[i] <- paste(G[i],G[i+1],G[i+2])
}
count <- 0
doubles <- 0
triples <- 0
for(i in 1:(length(G)-2)){
#print(count)
seq1 <- db[i]
#print(paste("i",i,sep=":"))
#print(seq1)
count <- 0
for(x in 1:(length(G)-2)){
#print(paste("x",x,sep=":"))
seq2 <- db[x]
#print(seq2)
if(seq1==seq2){
count <- count + 1
}
}
if(count==2){
doubles <- doubles + 1
}
if(count==3){
triples <- triples + 1
}
#print(count)
}
#print(doubles)
doubles.counts[z] <- doubles/2
triples.counts[z] <- triples/3
}
print(sum(doubles.counts)/(length(doubles.counts)))
print(sum(triples.counts)/(length(triples.counts)))
4^4
256
dbinom(3,29,1/256,log=FALSE)*64
dbinom(3,29,1/256,log=FALSE)*256
G
doubles.counts <- array()
triples.counts <- array()
for(z in 1:1000){
G <- sample(1:4,31,replace=TRUE)
db <- array()
for(i in 1:(length(G)-2)){
db[i] <- paste(G[i],G[i+1],G[i+2])
}
count <- 0
doubles <- 0
triples <- 0
for(i in 1:(length(G)-2)){
#print(count)
seq1 <- db[i]
#print(paste("i",i,sep=":"))
#print(seq1)
count <- 0
for(x in 1:(length(G)-2)){
#print(paste("x",x,sep=":"))
seq2 <- db[x]
#print(seq2)
if(seq1==seq2){
count <- count + 1
}
}
if(count==2){
doubles <- doubles + 1
}
if(count==3){
triples <- triples + 1
}
#print(count)
}
#print(doubles)
doubles.counts[z] <- doubles/2
triples.counts[z] <- triples/3
}
print(sum(doubles.counts)/(length(doubles.counts)))
print(sum(triples.counts)/(length(triples.counts)))
dbinom(3,29,1/64,log=FALSE)*64
k <- 3
doubles.counts <- array()
triples.counts <- array()
for(z in 1:1000){
G <- sample(1:4,31,replace=TRUE)
db <- array()
for(i in 1:(length(G)-(k-1))){
db[i] <- paste(G[i],G[i+1],G[i+2],G[i+3])
}
count <- 0
doubles <- 0
triples <- 0
for(i in 1:(length(G)-(k-1))){
#print(count)
seq1 <- db[i]
#print(paste("i",i,sep=":"))
#print(seq1)
count <- 0
for(x in 1:(length(G)-(k-1))){
#print(paste("x",x,sep=":"))
seq2 <- db[x]
#print(seq2)
if(seq1==seq2){
count <- count + 1
}
}
if(count==2){
doubles <- doubles + 1
}
if(count==3){
triples <- triples + 1
}
#print(count)
}
#print(doubles)
doubles.counts[z] <- doubles/2
triples.counts[z] <- triples/3
}
print(sum(doubles.counts)/(length(doubles.counts)))
print(sum(triples.counts)/(length(triples.counts)))
dbinom(3,29,1/256,log=FALSE)*256
k <- 3
doubles.counts <- array()
triples.counts <- array()
for(z in 1:1000){
G <- sample(1:4,31,replace=TRUE)
db <- array()
for(i in 1:(length(G)-(k-1))){
db[i] <- paste(G[i],G[i+1],G[i+2],G[i+3])
}
count <- 0
doubles <- 0
triples <- 0
for(i in 1:(length(G)-(k-1))){
#print(count)
seq1 <- db[i]
#print(paste("i",i,sep=":"))
#print(seq1)
count <- 0
for(x in 1:(length(G)-(k-1))){
#print(paste("x",x,sep=":"))
seq2 <- db[x]
#print(seq2)
if(seq1==seq2){
count <- count + 1
}
}
if(count==2){
doubles <- doubles + 1
}
if(count==3){
triples <- triples + 1
}
#print(count)
}
#print(doubles)
doubles.counts[z] <- doubles/2
triples.counts[z] <- triples/3
}
print(sum(doubles.counts)/(length(doubles.counts)))
print(sum(triples.counts)/(length(triples.counts)))
k <- 4
doubles.counts <- array()
triples.counts <- array()
for(z in 1:1000){
G <- sample(1:4,31,replace=TRUE)
db <- array()
for(i in 1:(length(G)-(k-1))){
db[i] <- paste(G[i],G[i+1],G[i+2],G[i+3])
}
count <- 0
doubles <- 0
triples <- 0
for(i in 1:(length(G)-(k-1))){
#print(count)
seq1 <- db[i]
#print(paste("i",i,sep=":"))
#print(seq1)
count <- 0
for(x in 1:(length(G)-(k-1))){
#print(paste("x",x,sep=":"))
seq2 <- db[x]
#print(seq2)
if(seq1==seq2){
count <- count + 1
}
}
if(count==2){
doubles <- doubles + 1
}
if(count==3){
triples <- triples + 1
}
#print(count)
}
#print(doubles)
doubles.counts[z] <- doubles/2
triples.counts[z] <- triples/3
}
print(sum(doubles.counts)/(length(doubles.counts)))
print(sum(triples.counts)/(length(triples.counts)))
dbinom(4,29,1/256,log=FALSE)*256
dbinom(3,29,1/256,log=FALSE)*256
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
x <- 1095
f(x)
n <- x + k - 1
print(n)
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
f(x)
n <- x + k - 1
print(n)
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
f(14)
n <- x + k - 1
print(n)
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
x <- 13
f(x)
n <- x + k - 1
print(n)
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k))
range <- c(1:14)
plot(range,f(range),type="l")
k
k <- 3
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
x <- 5
f(x)
x <- 6
f(x)
x <- 7
f(x)
x <- 6
f(x)
n <- x + k - 1
print(n)
k <- 5
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:14)
plot(range,f(range),type="l")
range <- c(1:20)
plot(range,f(range),type="l")
range <- c(1:30)
plot(range,f(range),type="l")
x <- 17
f(x)
x <- 18
f(x)
x <- 19
f(x)
x <- 20
f(x)
x <- 21
f(x)
x <- 22
f(x)
x <- 2
f(x)
x <- 25
f(x)
x <- 25
f(x)
n <- x + k - 1
print(n)
k <- 6
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:30)
plot(range,f(range),type="l")
range <- c(1:60)
plot(range,f(range),type="l")
x <- 40
f(x)
x <- 50
f(x)
x <- 51
f(x)
x <- 50
f(x)
n <- x + k - 1
print(n)
k <- 7
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:60)
range <- c(1:100)
plot(range,f(range),type="l")
x <- 100
f(x)
x <- 99
f(x)
n <- x + k - 1
print(n)
k <- 8
f <- function (x) (dbinom(2,x,1/(4^k),log=FALSE)*(4^k)*(1/6))
range <- c(1:500)
plot(range,f(range),type="l")
x <- 110
f(x)
range <- c(1:1000)
plot(range,f(range),type="l")
x <- 400
f(x)
x <- 200
f(x)
x <- 190
f(x)
x <- 195
f(x)
x <- 196
f(x)
x <- 197
f(x)
x <- 198
f(x)
x <- 199
f(x)
x <- 200
f(x)
x <- 199
f(x)
n <- x + k - 1
print(n)
n.array <- array()
n.array[1:6] <- c(8,16,29,55,105,206)
k.array <- array()
k.array [1:6] <- c(3,4,5,6,7,8)
plot(k.array,n.array,type="p",col="blue",xlab="k",ylab="maximum n")
library('edgeR')
library('dplyr')
library('ggplot2')
library('ggrepel')
library('qvalue')
library("gridExtra")
library("ggthemes")
library(RColorBrewer)
setwd("/Users/sydneyblattman/Desktop/Computational_Genomics/Project_Code/Marker_Gene_Expression")
data1 <- read.delim("SRR769418_normalized_matrix.txt",sep="\t")
data2 <- read.delim("SRR769429_normalized_matrix.txt",sep="\t")
setwd("/Users/sydneyblattman/Desktop/Computational_Genomics/Project_Code/Marker_Gene_Expression")
setwd("/Users/sydneyblattman/Dropbox/ncbi_data/Project_Code/Marker_Gene_Expression/")
data1 <- read.delim("SRR769418_normalized_matrix.txt",sep="\t")
data2 <- read.delim("SRR769429_normalized_matrix.txt",sep="\t")
rownames(data1) <- data1$ID
rownames(data2) <- data2$ID
data1 <- subset(data1, select = -c(ID,phylum))
data2 <- subset(data2, select = -c(ID,phylum))
data1_t = as.data.frame(t(data1))
sub_data1_t = as.data.frame(data1_t$meta_mOTU_v2_6557)
rownames(sub_data1_t) = rownames(data1_t)
colnames(sub_data1_t) = 'meta_mOTU_v2_6557_SRR769418'
data2_t = as.data.frame(t(data2))
sub_data1_t$meta_mOTU_v2_6557_SRR769429 = data2_t$meta_mOTU_v2_6557
data = sub_data1_t
samples <- c('indiv_1','indiv_2')
group <- c('indiv_1','indiv_2')
Counts <- data
dgList <- DGEList(counts=Counts, genes=rownames(Counts), group=group)
et <- exactTest(dgList, pair=c('indiv_1','indiv_2'), dispersion = 0.5^2)
result <- cbind(bnum=rownames(et$table), et$table )
result$genes <- rownames(result)
volc <- ggplot(result, aes(logFC, -log10(PValue),color=genes)) + #volcanoplot with log2Foldchange versus pvalue
geom_point(alpha=1,size=6) + #add points colored by significance
theme_classic() + scale_color_brewer(palette='Spectral') +
ggtitle('Individual 1 vs Individual 2 meta OTU 6557 Expression')
volc
volc + xlab('log(fold change)') + ylab('-log10(p-value)')
